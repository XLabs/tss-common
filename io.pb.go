// Copyright Â© 2019 Binance
//
// This file is part of Binance. The full Binance copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/io.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Using a struct in case we want to add more fields in the future
// This is used to identify a party in the TSS protocol. Must be unique.
type PartyID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartyID) Reset() {
	*x = PartyID{}
	mi := &file_proto_io_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartyID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyID) ProtoMessage() {}

func (x *PartyID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_io_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyID.ProtoReflect.Descriptor instead.
func (*PartyID) Descriptor() ([]byte, []int) {
	return file_proto_io_proto_rawDescGZIP(), []int{0}
}

func (x *PartyID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

// Wrapper for TSS messages, often read by the transport layer and not itself sent over the wire
type MessageWrapper struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata optionally un-marshalled and used by the transport to route this message.
	IsToOldCommittee bool `protobuf:"varint,2,opt,name=is_to_old_committee,json=isToOldCommittee,proto3" json:"is_to_old_committee,omitempty"` // used only in certain resharing messages
	// Metadata optionally un-marshalled and used by the transport to route this message.
	IsToOldAndNewCommittees bool `protobuf:"varint,5,opt,name=is_to_old_and_new_committees,json=isToOldAndNewCommittees,proto3" json:"is_to_old_and_new_committees,omitempty"` // used only in certain resharing messages
	// Metadata optionally un-marshalled and used by the transport to route this message.
	From *PartyID `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	// Metadata optionally un-marshalled and used by the transport to route this message.
	To *PartyID `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	// This field is actually what is sent through the wire and consumed on the other end by UpdateFromBytes.
	// An Any contains an arbitrary serialized message as bytes, along with a URL that
	// acts as a globally unique identifier for and resolves to that message's type.
	Message *anypb.Any `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	// Used to differentiate between simultaneous signing protocol runs.
	TrackingID    *TrackingID `protobuf:"bytes,11,opt,name=trackingID,proto3,oneof" json:"trackingID,omitempty"`
	Protocol      string      `protobuf:"bytes,12,opt,name=Protocol,proto3" json:"Protocol,omitempty"` // defines the protocol type.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageWrapper) Reset() {
	*x = MessageWrapper{}
	mi := &file_proto_io_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWrapper) ProtoMessage() {}

func (x *MessageWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_proto_io_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWrapper.ProtoReflect.Descriptor instead.
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return file_proto_io_proto_rawDescGZIP(), []int{1}
}

func (x *MessageWrapper) GetIsToOldCommittee() bool {
	if x != nil {
		return x.IsToOldCommittee
	}
	return false
}

func (x *MessageWrapper) GetIsToOldAndNewCommittees() bool {
	if x != nil {
		return x.IsToOldAndNewCommittees
	}
	return false
}

func (x *MessageWrapper) GetFrom() *PartyID {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *MessageWrapper) GetTo() *PartyID {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *MessageWrapper) GetMessage() *anypb.Any {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *MessageWrapper) GetTrackingID() *TrackingID {
	if x != nil {
		return x.TrackingID
	}
	return nil
}

func (x *MessageWrapper) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

// TrackingID is used to track the specific session when multiple sessions are running in parallel.
// All messages tied to specific session should have the same TrackingID.
type TrackingID struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the digest of the message that is being signed.
	Protocol uint32 `protobuf:"varint,1,opt,name=protocol,proto3" json:"protocol,omitempty"` // defines the protocol type (uses a single byte)
	Digest   []byte `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	// parties state indicate with true that a party is well,
	// and with false that a party is not well for this specific digest.
	// the size of parties_state should allow enough bits to count all participating parties in the protocol.
	PartiesState []byte `protobuf:"bytes,3,opt,name=parties_state,json=partiesState,proto3" json:"parties_state,omitempty"`
	// any auxiliary data provided to the protocol from outside, and needs to be on every message.
	AuxiliaryData []byte `protobuf:"bytes,4,opt,name=auxiliary_data,json=auxiliaryData,proto3" json:"auxiliary_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrackingID) Reset() {
	*x = TrackingID{}
	mi := &file_proto_io_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrackingID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingID) ProtoMessage() {}

func (x *TrackingID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_io_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingID.ProtoReflect.Descriptor instead.
func (*TrackingID) Descriptor() ([]byte, []int) {
	return file_proto_io_proto_rawDescGZIP(), []int{2}
}

func (x *TrackingID) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *TrackingID) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *TrackingID) GetPartiesState() []byte {
	if x != nil {
		return x.PartiesState
	}
	return nil
}

func (x *TrackingID) GetAuxiliaryData() []byte {
	if x != nil {
		return x.AuxiliaryData
	}
	return nil
}

// Container for output signatures, mostly used for marshalling this data structure to a mobile app
type SignatureData struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Signature []byte                 `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Ethereum-style recovery byte; only the first byte is relevant
	SignatureRecovery []byte `protobuf:"bytes,2,opt,name=signature_recovery,json=signatureRecovery,proto3" json:"signature_recovery,omitempty"`
	// Signature components R, S
	R []byte `protobuf:"bytes,3,opt,name=r,proto3" json:"r,omitempty"`
	S []byte `protobuf:"bytes,4,opt,name=s,proto3" json:"s,omitempty"`
	// M represents the original message digest that was signed M
	M []byte `protobuf:"bytes,5,opt,name=m,proto3" json:"m,omitempty"`
	// This value is set once a new local party is created.
	// used to track the specific session when multiple sessions are running in parallel.
	TrackingId    *TrackingID `protobuf:"bytes,6,opt,name=tracking_id,json=trackingId,proto3" json:"tracking_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignatureData) Reset() {
	*x = SignatureData{}
	mi := &file_proto_io_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignatureData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureData) ProtoMessage() {}

func (x *SignatureData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_io_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureData.ProtoReflect.Descriptor instead.
func (*SignatureData) Descriptor() ([]byte, []int) {
	return file_proto_io_proto_rawDescGZIP(), []int{3}
}

func (x *SignatureData) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignatureData) GetSignatureRecovery() []byte {
	if x != nil {
		return x.SignatureRecovery
	}
	return nil
}

func (x *SignatureData) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

func (x *SignatureData) GetS() []byte {
	if x != nil {
		return x.S
	}
	return nil
}

func (x *SignatureData) GetM() []byte {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *SignatureData) GetTrackingId() *TrackingID {
	if x != nil {
		return x.TrackingId
	}
	return nil
}

var File_proto_io_proto protoreflect.FileDescriptor

const file_proto_io_proto_rawDesc = "" +
	"\n" +
	"\x0eproto/io.proto\x12\x0fxlabs.tsscommon\x1a\x19google/protobuf/any.proto\"\x19\n" +
	"\aPartyID\x12\x0e\n" +
	"\x02ID\x18\x01 \x01(\tR\x02ID\"\xf3\x02\n" +
	"\x0eMessageWrapper\x12-\n" +
	"\x13is_to_old_committee\x18\x02 \x01(\bR\x10isToOldCommittee\x12=\n" +
	"\x1cis_to_old_and_new_committees\x18\x05 \x01(\bR\x17isToOldAndNewCommittees\x12,\n" +
	"\x04from\x18\x03 \x01(\v2\x18.xlabs.tsscommon.PartyIDR\x04from\x12(\n" +
	"\x02to\x18\x04 \x01(\v2\x18.xlabs.tsscommon.PartyIDR\x02to\x12.\n" +
	"\amessage\x18\n" +
	" \x01(\v2\x14.google.protobuf.AnyR\amessage\x12@\n" +
	"\n" +
	"trackingID\x18\v \x01(\v2\x1b.xlabs.tsscommon.TrackingIDH\x00R\n" +
	"trackingID\x88\x01\x01\x12\x1a\n" +
	"\bProtocol\x18\f \x01(\tR\bProtocolB\r\n" +
	"\v_trackingID\"\x8c\x01\n" +
	"\n" +
	"TrackingID\x12\x1a\n" +
	"\bprotocol\x18\x01 \x01(\rR\bprotocol\x12\x16\n" +
	"\x06digest\x18\x02 \x01(\fR\x06digest\x12#\n" +
	"\rparties_state\x18\x03 \x01(\fR\fpartiesState\x12%\n" +
	"\x0eauxiliary_data\x18\x04 \x01(\fR\rauxiliaryData\"\xc4\x01\n" +
	"\rSignatureData\x12\x1c\n" +
	"\tsignature\x18\x01 \x01(\fR\tsignature\x12-\n" +
	"\x12signature_recovery\x18\x02 \x01(\fR\x11signatureRecovery\x12\f\n" +
	"\x01r\x18\x03 \x01(\fR\x01r\x12\f\n" +
	"\x01s\x18\x04 \x01(\fR\x01s\x12\f\n" +
	"\x01m\x18\x05 \x01(\fR\x01m\x12<\n" +
	"\vtracking_id\x18\x06 \x01(\v2\x1b.xlabs.tsscommon.TrackingIDR\n" +
	"trackingIdB\n" +
	"Z\b./commonb\x06proto3"

var (
	file_proto_io_proto_rawDescOnce sync.Once
	file_proto_io_proto_rawDescData []byte
)

func file_proto_io_proto_rawDescGZIP() []byte {
	file_proto_io_proto_rawDescOnce.Do(func() {
		file_proto_io_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_io_proto_rawDesc), len(file_proto_io_proto_rawDesc)))
	})
	return file_proto_io_proto_rawDescData
}

var file_proto_io_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_io_proto_goTypes = []any{
	(*PartyID)(nil),        // 0: xlabs.tsscommon.PartyID
	(*MessageWrapper)(nil), // 1: xlabs.tsscommon.MessageWrapper
	(*TrackingID)(nil),     // 2: xlabs.tsscommon.TrackingID
	(*SignatureData)(nil),  // 3: xlabs.tsscommon.SignatureData
	(*anypb.Any)(nil),      // 4: google.protobuf.Any
}
var file_proto_io_proto_depIdxs = []int32{
	0, // 0: xlabs.tsscommon.MessageWrapper.from:type_name -> xlabs.tsscommon.PartyID
	0, // 1: xlabs.tsscommon.MessageWrapper.to:type_name -> xlabs.tsscommon.PartyID
	4, // 2: xlabs.tsscommon.MessageWrapper.message:type_name -> google.protobuf.Any
	2, // 3: xlabs.tsscommon.MessageWrapper.trackingID:type_name -> xlabs.tsscommon.TrackingID
	2, // 4: xlabs.tsscommon.SignatureData.tracking_id:type_name -> xlabs.tsscommon.TrackingID
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_proto_io_proto_init() }
func file_proto_io_proto_init() {
	if File_proto_io_proto != nil {
		return
	}
	file_proto_io_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_io_proto_rawDesc), len(file_proto_io_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_io_proto_goTypes,
		DependencyIndexes: file_proto_io_proto_depIdxs,
		MessageInfos:      file_proto_io_proto_msgTypes,
	}.Build()
	File_proto_io_proto = out.File
	file_proto_io_proto_goTypes = nil
	file_proto_io_proto_depIdxs = nil
}
